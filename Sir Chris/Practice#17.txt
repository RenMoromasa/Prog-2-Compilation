#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#define WEIGHTLIMIT 5

typedef struct{
    char studID[9];        
    char studName[65];  
    char course[5];        
}Student;

typedef struct{
    char itemName[33];    
    float weight;        /* Weight of the item to be stored */    
}ItemDets;

typedef struct ItemNode{
    ItemDets items[9999];    /It is assumed that the itemList will not be filled based on the number of items, but the weight./
    int numItems;
    float totWeight;        /* Total weight of all items in the locker */
}ItemList;

typedef struct{
    Student owner;            /* Details of the student who owns the locker */
    ItemList IL;            /* ArrayList representation of all the items inside a certain locker */
    int lockerStat;          /* 0 if locker is Vacant, 1 if occupied */
}Locker;

/* Function depositItem(): This function will receive as parameter a Locker, a student ID, and an item to be stored. The function will insert the item into the Locker's ItemList, which is sorted by weight. Heavier items are stored at the end of the locker's ItemList. Make sure that the weight of all items, including the new item to store, does not exceed the weight limit. */

void depositItem(Locker* L, ItemDets newItem)
{
    int i;
    if(L->IL.totWeight+newItem.weight <= WEIGHTLIMIT){
        for(i = 0; i < L->IL.numItems && L->IL.items[i].weight < newItem.weight; i++){}
        memcpy(L->IL.items+i+1, L->IL.items+i, sizeof(ItemDets) * (L->IL.numItems - i));
        L->IL.items[i] = newItem;
        L->IL.numItems++;
        L->IL.totWeight += newItem.weight;
        printf("Item %s has been inserted.\n", newItem.itemName);
    }else{
        printf("Cannot insert item %s as it exceeds the weight limit.\n", newItem.itemName);
    }
}

void displayItemList(ItemList L, int version)
{
    int i;
    float totWeight = 0;
    for(i = 0; i < L.numItems; i++){
        printf("[%d] Item: %-15s | Weight: %-15.2f\n", i, L.items[i].itemName, L.items[i].weight);
    }
    if(version == 0){
        printf("Total Weight: %.2fkg\n\n", L.totWeight);   
    }else if (version == 1){
        printf("[-1] Exit\n");
    }
}

void displayLockers(Locker L[], int size)
{
    int i;
    printf("\n");
    for(i = 0; i < size; i++){
        printf("Locker: [%s] %s\n", L[i].owner.studID, L[i].owner.studName);
        displayItemList(L[i].IL, 0);
    }
}

int main(void)
{
    ItemDets item1 = {"Prog 1 Book", 0.35};
    ItemDets item2 = {"Shoes", 0.87};
    ItemDets item3 = {"Laptop", 2.35};
    ItemDets item4 = {"Keyboard", 1.17};
    ItemDets item5 = {"Notebook", 0.15};
    ItemDets item6 = {"Backpack", 1.80};
    ItemList insertable = {{item1, item2, item3, item4, item5, item6}, 6, 6.69};
    
    Locker locker1 = {{"14101941", "Cris Militante", "BSCS"}, {{}, 0}, 1, 0};
    Locker locker2 = {{"14101943", "Gabriel Pineda", "BSCS"}, {{}, 0}, 1, 0};
    Locker lockers[] = {locker1, locker2};
    
    int itemInput;
    int lockerInput;
    do{
        printf("[0] - Cris Militante\n");
        printf("[1] - Gabriel Pineda\n");
        printf("Select a locker: ");
        scanf(" %d", &lockerInput);
        
        if(lockerInput < 2 && lockerInput > -1){
            displayItemList(insertable, 1);
            printf("Input the item you would like to insert: ");
            scanf(" %d", &itemInput);
            if(itemInput != -1){
                depositItem(&lockers[lockerInput], insertable.items[itemInput]);
            }
        }else{
            printf("Invalid Locker Inputted!\n");
        }
    }while(itemInput != -1);
    
    displayLockers(lockers, 2);
    return 0;
}