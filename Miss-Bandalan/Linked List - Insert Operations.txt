Linked List - Insert Operations
by Edwin Bartlett

struct Node:

This is a structure definition that creates a template for each element (node) in the linked list.
It contains:
int data: Stores the integer value held by the node.
struct Node* next: Stores the memory address of the next node in the sequence, forming the link.
insertAtBeginning(struct Node** head, int data):

Inserts a new node containing the given data at the front (beginning) of the linked list.
It updates the head pointer to point to the newly inserted node.
It handles memory allocation, and reports memory allocation failure.
insertAtEnd(struct Node** head, int data):

Inserts a new node containing the given data at the end of the linked list.
It traverses the list to find the last node, then appends the new node.
It handles the case of an empty list, and memory allocation failure.
insertAtPosition(struct Node** head, int data, int position):

Inserts a new node containing the given data at the specified position within the linked list.
It handles insertion at the beginning (position 1), insertion in the middle, and checks for invalid positions (positions that exceed the list's length).
It handles memory allocation failure.
displayList(struct Node* head):

Traverses the linked list from the head to the end.
Prints the data value of each node in the list, showing the sequence of elements.
Prints a message if the list is empty.
freeList(struct Node* head):

Releases the memory that was dynamically allocated for each node in the linked list.
This is crucial to prevent memory leaks.
It iterates through the list, freeing each node one by one.
Sample Output 1

Inserted 5 at the beginning
Inserted 10 at the end
Inserted 15 at the end
Inserted 2 at the beginning
Inserted 7 at position 3
Inserted 20 at the beginning
Inserted 25 at position 6
Inserted 30 at position 8
Linked list elements:
20 -> 2 -> 5 -> 7 -> 10 -> 25 -> 15 -> 30 -> NULL