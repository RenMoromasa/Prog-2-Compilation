Basic ArrayList Exercise
by Edwin Bartlett

1. Create the ArrayList Structure:

Define a struct named ArrayList that contains the following members:
int *data: A pointer to an integer array.
int count: An integer representing the current number of elements in the array list.
int length: An integer representing the total allocated capacity of the array list.
2. Implement the createArrayList Function:

Write a function called createArrayList that takes an integer initialCapacity as input.
This function should:
Allocate memory for an ArrayList structure using malloc.
Allocate memory for the initial integer array using malloc, based on the initialCapacity.
Initialize the count to 0 and length to initialCapacity.
Return a pointer to the created ArrayList.
Include error checking: if memory allocation fails, return NULL after freeing any allocated memory.
3. Implement the addElement Function:

Write a function called addElement that takes an ArrayList pointer and an integer value as input.
This function should:
Check if the array list is full (i.e., count equals length).
If the array list is full:
Double the length.
Use realloc to allocate a new, larger array.
Update the data pointer and the length member.
Include error checking: if realloc fails, do nothing.
Add the value to the end of the array list and increment the count.
4. Implement the getElement Function:

Write a function called getElement that takes an ArrayList pointer and an integer index as input.
This function should:
Check if the index is within the valid range (0 to count - 1).
If the index is valid, return the element at that index.
If the index is invalid, return -1.
5. Implement the freeArrayList Function:

Write a function called freeArrayList that takes an ArrayList pointer as input.
This function should:
Free the memory allocated for the integer array using free.
Free the memory allocated for the ArrayList structure using free.

Sample Output 1

Element at index 0: 10
Element at index 1: 20
Element at index 2: 30
Element at index 3: 25
Element at index 4: 35